/*
  @param {number} carouselId - a number part from id attribute. 
  @param {boolean} hasTwoItemsPerSlide 
*/

function carouselInstanse(carouselId, hasTwoItemsPerSlide) {
  const carousel = document.querySelector(
    `#carousel-instance-${carouselId} #carousel-box`
  );

  let viewportWidth = null;
  let currentIndex = 0;
  let slides = calculateSlides();

  if (slides <= 1) {
    const controllers = document.querySelector(
      `#carousel-instance-${carouselId} .slides-count`
    );
    controllers.style.display = "none";

    /* Since we have only one slide, we can drop functionality */
    return;
  }

  let isDesktop = false;
  let isMobile = true;

  function calculateSlides() {
    return document.querySelectorAll(
      `#carousel-instance-${carouselId} .carousel-item`
    ).length;
  }

  function updateCarousel() {
    const itemWidth = document.querySelectorAll(
      `#carousel-instance-${carouselId} .carousel-item`
    )[0].offsetWidth;
    const newPosition = -currentIndex * (itemWidth + 20); // 20 is the right margin

    document.querySelector(
      `#carousel-instance-${carouselId} #slides-count`
    ).innerHTML = currentIndex + 1 + "&nbsp;of&nbsp;" + slides;

    carousel.style.transform = `translateX(${newPosition}px)`;

    viewportWidth = window.innerWidth;

    if (hasTwoItemsPerSlide) {
      if (viewportWidth <= 820 && isDesktop) {
        changeCarouselStructure(isDesktop, isMobile);
        isDesktop = false;
        isMobile = true;
      }
      // If the viewport width is greater than 820, and it was not mobile before
      else if (viewportWidth > 820 && isMobile) {
        changeCarouselStructure(isDesktop, isMobile);
        isDesktop = true;
        isMobile = false;
      }
    }

    updateThumbs();
  }

  function nextSlide() {
    currentIndex =
      (currentIndex + 1) %
      document.querySelectorAll(
        `#carousel-instance-${carouselId} .carousel-item`
      ).length;

    updateCarousel();
  }

  function prevSlide() {
    currentIndex =
      (currentIndex -
        1 +
        document.querySelectorAll(
          `#carousel-instance-${carouselId} .carousel-item`
        ).length) %
      document.querySelectorAll(
        `#carousel-instance-${carouselId} .carousel-item`
      ).length;

    updateCarousel();
  }

  function updateThumbs() {
    const thumbs = document.querySelectorAll(
      `#carousel-instance-${carouselId} .carousel-thumb-item`
    );
    const prevActiveThumbs = document.querySelectorAll(
      `#carousel-instance-${carouselId} .carousel-thumb-item--active`
    );

    if (prevActiveThumbs.length >= 1) {
      prevActiveThumbs[0].classList.remove("carousel-thumb-item--active");
    }
    thumbs[currentIndex].classList.add("carousel-thumb-item--active");
  }

  function renderThumbs(carouselId) {
    const container = document.querySelector(
      `#carousel-instance-${carouselId} .carousel-thumbs`
    );

    let thumb = " <ul>";

    for (let idx = 0; idx < slides; idx++) {
      thumb += `<li class="carousel-thumb-item"></li>`;
    }

    thumb += "</ul>";
    container.innerHTML = thumb;

    const thumbs = document.querySelectorAll(
      `#carousel-instance-${carouselId} .carousel-thumb-item`
    );

    if (thumbs.length) {
      thumbs.forEach((thumb, idx) => {
        thumb.addEventListener("click", function () {
          currentIndex = idx;
          updateCarousel();
        });
      });
    }
  }

  function changeCarouselStructure(isDesktop, isMobile) {
    const items = document.querySelectorAll(
      `#carousel-instance-${carouselId} .carousel-item__content`
    );

    const mobileStructure = Array.from(items)
      .map((item) => `<div class="carousel-item">${item.outerHTML}</div>`)
      .join("");

    /* THIS CODE GENERATED BY ChatGPT */
    const desktopStructure = Array.from(items)
      .map((item, index, array) => {
        if (index % 2 === 0) {
          // Pair the first two items and create individual slides for the rest
          return `<div class="carousel-item">${item.outerHTML}${
            array[index + 1] ? array[index + 1].outerHTML : ""
          }</div>`;
        }
        return "";
      })
      .join("");

    if (isDesktop) {
      carousel.innerHTML = mobileStructure;
      slides = calculateSlides();
      currentIndex = 0;
    } else if (isMobile) {
      carousel.innerHTML = desktopStructure;
      slides = calculateSlides();
      currentIndex = 0;
    }

    slides = calculateSlides();
    renderThumbs(carouselId);
    isUpdated = true;
  }

  function assignEventListeners() {
    window.addEventListener("resize", updateCarousel);

    const nextButton = document.querySelector(
      `#carousel-instance-${carouselId} #next-slide-control`
    );
    nextButton.addEventListener("click", nextSlide);
    const prevButton = document.querySelector(
      `#carousel-instance-${carouselId} #prev-slide-control`
    );
    prevButton.addEventListener("click", prevSlide);

    /* functionality for swiping on touch devices */
    let touchstartX = 0;
    let touchendX = 0;
    const touchTolarance = 50;

    function checkDirection() {
      if (touchendX < touchstartX && touchstartX - touchendX > touchTolarance) {
        nextSlide();
      }
      if (touchendX > touchstartX && touchendX - touchstartX > touchTolarance) {
        prevSlide();
      }
    }

    document
      .querySelector(`#carousel-instance-${carouselId}`)
      .addEventListener("touchstart", (e) => {
        touchstartX = e.changedTouches[0].screenX;
      });

    document
      .querySelector(`#carousel-instance-${carouselId}`)
      .addEventListener("touchend", (e) => {
        touchendX = e.changedTouches[0].screenX;
        checkDirection();
      });
  }

  renderThumbs(carouselId);
  assignEventListeners();
  updateCarousel();
}

/*
  first param is carousel id, make sure that for each carousel on a page we have different id
  second param is using for render two content items per slide:
    true - mean that we have 2 columns with content per slide
    false - mean that we have only one content column per slide
*/
const carousel1 = carouselInstanse(1, true);
const carousel2 = carouselInstanse(2, false);
